{"version":3,"sources":["utils/crypto.ts","components/keyPost.tsx","utils/createFileURL.ts","createKeysPanel.tsx","components/dropzone.tsx","utils/readFileAsText.ts","decryptPanel.tsx","components/RadioCard.tsx","encryptPanel.tsx","App.tsx","index.tsx"],"names":["createKeyPair","name","email","passphrase","a","generateKey","userIds","rsaBits","getPrivateKey","privateKeyArmored","key","readArmored","keys","privateKey","decrypt","decryptMessage","encrypted","message","privateKeys","decrypted","data","encryptMessage","publicKeyArmored","msg","encrypt","fromText","publicKeys","KeyPost","header","keyLink","filename","borderWidth","borderRadius","p","justifi","align","direction","mb","href","isExternal","download","leftIcon","as","MdFileDownload","w","h","bg","createFileURL","URL","createObjectURL","Blob","CreateKeysPanel","useState","show","setShow","open","alertError","setAlertError","loading","publicKeyURL","privateKeyURL","keyData","setKeyData","useForm","register","handleSubmit","reset","errors","onSubmit","password","publicURL","privateURL","maxW","spacing","isRequired","isInvalid","placeholder","size","ref","required","pattern","value","pr","type","width","onClick","isFullWidth","isLoading","loadingText","status","my","position","right","top","justify","DropZone","control","setValue","defaultValue","rules","validate","filled","length","render","onChange","onBlur","fontSize","aria-label","icon","onDrop","getRootProps","getInputProps","_hover","cursor","MdCloudUpload","readFileAsText","file","Promise","resolve","reject","fr","FileReader","onload","result","onerror","readAsText","EncryptPanel","showDecrytedMessage","setShowDecryptedMessage","keyFile","messageFile","files","all","then","decryptedMessage","console","log","RadioCard","props","useRadio","getCheckboxProps","input","checkbox","boxShadow","_checked","color","borderColor","_focus","px","py","children","encryptedMessageValue","setEncryptedMessageValue","radioValue","setRadioValue","useClipboard","hasCopied","onCopy","encryptedMessage","useRadioGroup","e","getRadioProps","group","map","radio","resize","App","isManual","isFitted","variant","defaultIndex","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.601794f5.chunk.js","sourcesContent":["import { generateKey, key, encrypt, message, decrypt } from \"openpgp\";\n\nexport async function createKeyPair(name: string, email: string, passphrase: string) {\n  //@ts-ignore\n  return await generateKey({ userIds: [{ name, email }], rsaBits: 4096, passphrase });\n}\n\nexport async function getPrivateKey(privateKeyArmored: string, passphrase: string) {\n  const {\n    keys: [privateKey],\n  } = await key.readArmored(privateKeyArmored);\n  await privateKey.decrypt(passphrase);\n  return privateKey;\n}\n\nexport async function decryptMessage(\n  privateKeyArmored: string,\n  passphrase: string,\n  encrypted: string\n) {\n  const privateKey = await getPrivateKey(privateKeyArmored, passphrase);\n  const { data: decrypted } = await decrypt({\n    message: await message.readArmored(encrypted),\n    privateKeys: [privateKey],\n  });\n  return decrypted;\n}\n\nexport async function encryptMessage(publicKeyArmored: string, msg: string) {\n  const { data: encrypted } = await encrypt({\n    message: message.fromText(msg),\n    publicKeys: (await key.readArmored(publicKeyArmored)).keys,\n  });\n  return encrypted;\n}\n\n//(async () => {\n//const { privateKeyArmored, publicKeyArmored } = await createKeyPair(\n//\"juan\",\n//\"juan@gmail.com\",\n//\"falopa\"\n//);\n//const encryptedMessage = await encryptMessage(publicKeyArmored, \"esto es un secreto\");\n//console.log(encryptedMessage);\n//const decryptedMessage = await decryptMessage(privateKeyArmored, \"falopa\", encryptedMessage);\n//console.log(decryptedMessage);\n//})();\n","import { Button, Flex, Link, Heading, Icon } from \"@chakra-ui/react\";\nimport { MdFileDownload } from \"react-icons/md\";\ninterface IProps {\n  header: string;\n  keyLink: string;\n  filename: string;\n}\nexport default function KeyPost({ header, keyLink, filename }: IProps) {\n  return (\n    <Flex\n      borderWidth=\"1px\"\n      borderRadius=\"lg\"\n      p={6}\n      justifi=\"center\"\n      align=\"center\"\n      direction=\"column\"\n    >\n      <Heading mb={4}>{header}</Heading>\n      <Link href={keyLink} isExternal download={filename}>\n        <Button leftIcon={<Icon as={MdFileDownload} w={6} h={6} />} bg=\"teal.500\">\n          Download\n        </Button>\n      </Link>\n    </Flex>\n  );\n}\n","export const createFileURL = (data: string) => URL.createObjectURL(new Blob([data]));\n","import {\n  Button,\n  Stack,\n  Container,\n  Input,\n  InputGroup,\n  InputRightElement,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Flex,\n  Spacer,\n  Alert,\n  AlertIcon,\n  CloseButton,\n} from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport { useState } from \"react\";\nimport { createKeyPair } from \"./utils/crypto\";\nimport KeyPost from \"./components/keyPost\";\nimport { createFileURL } from \"./utils/createFileURL\";\n\ninterface ISubmitProps {\n  name: string;\n  email: string;\n  password: string;\n}\n\ninterface IKeyData {\n  loading: boolean;\n  publicKeyURL: string;\n  privateKeyURL: string;\n  name: string;\n}\n\ninterface IAlertData {\n  open: boolean;\n  message: string;\n}\n\nexport default function CreateKeysPanel() {\n  const [show, setShow] = useState<boolean>(false);\n  const [alertError, setAlertError] = useState<IAlertData>({ open: false, message: \"\" });\n  const [keyData, setKeyData] = useState<IKeyData>({\n    loading: false,\n    publicKeyURL: \"\",\n    privateKeyURL: \"\",\n    name: \"\",\n  });\n  const handleClick = () => setShow(!show);\n  const { register, handleSubmit, reset, errors } = useForm();\n  const onSubmit = async ({ name, email, password }: ISubmitProps) => {\n    setKeyData({ loading: true, publicKeyURL: \"\", privateKeyURL: \"\", name: \"\" });\n    try {\n      const { privateKeyArmored, publicKeyArmored } = await createKeyPair(name, email, password);\n      const publicURL = createFileURL(publicKeyArmored);\n      const privateURL = createFileURL(privateKeyArmored);\n      setKeyData({ loading: false, publicKeyURL: publicURL, privateKeyURL: privateURL, name });\n      reset();\n    } catch (e) {\n      setAlertError({ open: true, message: \"Invalid Email\" });\n      setKeyData({ loading: false, publicKeyURL: \"\", privateKeyURL: \"\", name: \"\" });\n    }\n  };\n  return (\n    <Container maxW=\"2xl\" h=\"full\">\n      <Stack as=\"form\" onSubmit={handleSubmit(onSubmit)} spacing={4}>\n        <FormControl isRequired isInvalid={errors?.name ? true : false}>\n          <FormLabel>Name</FormLabel>\n          <Input\n            placeholder=\"Name\"\n            size=\"md\"\n            name=\"name\"\n            ref={register({ required: \"This field is required\" })}\n          />\n          <FormErrorMessage>{errors?.name?.message}</FormErrorMessage>\n        </FormControl>\n        <FormControl isRequired isInvalid={errors?.email ? true : false}>\n          <FormLabel>Email address</FormLabel>\n          <Input\n            placeholder=\"Email\"\n            size=\"md\"\n            name=\"email\"\n            ref={register({\n              required: \"This field is required\",\n              pattern: { value: /^\\S+@\\S+$/i, message: \"Not an email\" },\n            })}\n          />\n          <FormErrorMessage>{errors?.email?.message}</FormErrorMessage>\n        </FormControl>\n        <FormControl isRequired isInvalid={errors?.password ? true : false}>\n          <FormLabel>Password</FormLabel>\n          <InputGroup size=\"md\">\n            <Input\n              pr=\"4.5rem\"\n              type={show ? \"text\" : \"password\"}\n              placeholder=\"Enter password\"\n              name=\"password\"\n              ref={register({ required: \"This field is required\" })}\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                {show ? \"Hide\" : \"Show\"}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n          <FormErrorMessage>{errors?.password?.message}</FormErrorMessage>\n        </FormControl>\n        <Button\n          isFullWidth\n          bg=\"teal.500\"\n          type=\"submit\"\n          isLoading={keyData.loading}\n          loadingText=\"Creating\"\n        >\n          Create Key Pair\n        </Button>\n      </Stack>\n\n      {alertError.open ? (\n        <Alert status=\"error\" my={4}>\n          <AlertIcon />\n          {alertError.message}\n          <CloseButton\n            position=\"absolute\"\n            right=\"8px\"\n            top=\"8px\"\n            onClick={() => setAlertError({ open: false, message: \"\" })}\n          />\n        </Alert>\n      ) : null}\n      {!keyData.loading && keyData.publicKeyURL && keyData.privateKeyURL ? (\n        <Flex align=\"center\" justify=\"center\" my={8}>\n          <Spacer />\n          <KeyPost\n            header=\"Public Key\"\n            filename={`${keyData.name}Public.key`}\n            keyLink={keyData.publicKeyURL}\n          />\n          <Spacer />\n          <KeyPost\n            header=\"Private Key\"\n            filename={`${keyData.name}Private.key`}\n            keyLink={keyData.privateKeyURL}\n          />\n          <Spacer />\n        </Flex>\n      ) : null}\n    </Container>\n  );\n}\n","import { Text, Flex, Icon, Box, Spacer, IconButton } from \"@chakra-ui/react\";\nimport Dropzone from \"react-dropzone\";\nimport { Control, Controller } from \"react-hook-form\";\nimport { MdCloudUpload, MdRefresh } from \"react-icons/md\";\ninterface IProps {\n  control: Control;\n  name: string;\n  setValue: any;\n}\nexport default function DropZone({ control, name, setValue }: IProps) {\n  return (\n    <Controller\n      control={control}\n      name={name}\n      defaultValue={[]}\n      rules={{ validate: { filled: (value) => value.length === 1 } }}\n      render={({ onChange, onBlur, value }) => (\n        <>\n          {value[0] ? (\n            <Box borderWidth=\"1px\" borderRadius=\"lg\" bg=\"gray.700\" p={6}>\n              <Flex justify=\"center\" align=\"center\">\n                <Text fontSize=\"lg\">{value[0].name}</Text>\n                <Spacer />\n                <IconButton\n                  aria-label=\"Change Key\"\n                  fontSize=\"20px\"\n                  icon={<MdRefresh />}\n                  onClick={() => {\n                    setValue(name, []);\n                  }}\n                />\n              </Flex>\n            </Box>\n          ) : (\n            <Dropzone onDrop={onChange}>\n              {({ getRootProps, getInputProps }) => (\n                <Flex\n                  {...getRootProps()}\n                  justify=\"center\"\n                  align=\"center\"\n                  direction=\"column\"\n                  borderWidth=\"1px\"\n                  borderRadius=\"lg\"\n                  p={6}\n                  _hover={{ cursor: \"pointer\" }}\n                  bg=\"gray.700\"\n                >\n                  <input {...getInputProps()} onBlur={onBlur} />\n                  <Icon as={MdCloudUpload} w={20} h={20} />\n                  <Text fontSize=\"lg\">Drag n' Drop file, or click to select</Text>\n                </Flex>\n              )}\n            </Dropzone>\n          )}\n        </>\n      )}\n    />\n  );\n}\n","export default function readFileAsText(file: File): Promise<string> {\n  return new Promise(function (resolve, reject) {\n    let fr = new FileReader();\n\n    fr.onload = function () {\n      resolve(fr.result as string);\n    };\n\n    fr.onerror = function () {\n      reject(fr);\n    };\n\n    fr.readAsText(file);\n  });\n}\n","import {\n  Container,\n  Stack,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  InputRightElement,\n  Button,\n  InputGroup,\n  Text,\n  Box,\n} from \"@chakra-ui/react\";\nimport DropZone from \"./components/dropzone\";\nimport { useForm } from \"react-hook-form\";\nimport { useState } from \"react\";\nimport { decryptMessage } from \"./utils/crypto\";\nimport readFileAsText from \"./utils/readFileAsText\";\n\ninterface IProps {\n  file: any[];\n  password: string;\n  messageFile: any[];\n}\n\nexport default function EncryptPanel() {\n  const [show, setShow] = useState<boolean>(false);\n  const [showDecrytedMessage, setShowDecryptedMessage] = useState<string>(\"\");\n  const { register, handleSubmit, errors, control, setValue } = useForm();\n\n  const onSubmit = async ({ file: [keyFile], password, messageFile: [messageFile] }: IProps) => {\n    const files = [readFileAsText(keyFile), readFileAsText(messageFile)];\n    Promise.all(files).then(([key, message]) => {\n      decrypt(key, password, message);\n    });\n  };\n\n  const decrypt = async (key: any, password: string, message: string) => {\n    try {\n      const decryptedMessage = await decryptMessage(key, password, message);\n      setShowDecryptedMessage(decryptedMessage);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const handleClick = () => setShow(!show);\n\n  return (\n    <Container maxW=\"2xl\" h=\"full\">\n      <Stack as=\"form\" onSubmit={handleSubmit(onSubmit)} spacing={4}>\n        <FormControl isRequired isInvalid={errors?.file ? true : false}>\n          <FormLabel>Private Key</FormLabel>\n          <DropZone name=\"file\" control={control} setValue={setValue} />\n          <FormErrorMessage>{errors?.file && \"No file selected\"}</FormErrorMessage>\n        </FormControl>\n        <FormControl isRequired isInvalid={errors?.password ? true : false}>\n          <FormLabel>Password</FormLabel>\n          <InputGroup size=\"md\">\n            <Input\n              pr=\"4.5rem\"\n              type={show ? \"text\" : \"password\"}\n              placeholder=\"Enter password\"\n              name=\"password\"\n              ref={register({ required: \"This field is required\" })}\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                {show ? \"Hide\" : \"Show\"}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n          <FormErrorMessage>{errors?.password?.message}</FormErrorMessage>\n        </FormControl>\n        <FormControl isRequired isInvalid={errors?.file ? true : false}>\n          <FormLabel>Message</FormLabel>\n          <DropZone name=\"messageFile\" control={control} setValue={setValue} />\n          <FormErrorMessage>{errors?.file && \"No file selected\"}</FormErrorMessage>\n        </FormControl>\n        <Button isFullWidth bg=\"teal.500\" type=\"submit\">\n          Decrypt Message\n        </Button>\n      </Stack>\n      {showDecrytedMessage && (\n        <Box my={6} borderWidth=\"1px\" borderRadius=\"lg\" p={6}>\n          <Text>{showDecrytedMessage}</Text>\n        </Box>\n      )}\n    </Container>\n  );\n}\n","import { Box, useRadio } from \"@chakra-ui/react\";\nexport default function RadioCard(props: any) {\n  const { getInputProps, getCheckboxProps } = useRadio(props);\n\n  const input = getInputProps();\n  const checkbox = getCheckboxProps();\n\n  return (\n    <Box as=\"label\">\n      <input {...input} />\n      <Box\n        {...checkbox}\n        cursor=\"pointer\"\n        borderWidth=\"1px\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        _checked={{\n          bg: \"teal.600\",\n          color: \"white\",\n          borderColor: \"teal.600\",\n        }}\n        _focus={{\n          boxShadow: \"outline\",\n        }}\n        px={5}\n        py={3}\n      >\n        {props.children}\n      </Box>\n    </Box>\n  );\n}\n","import {\n  Container,\n  Stack,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Button,\n  Textarea,\n  useClipboard,\n  Flex,\n  Link,\n  Icon,\n  Spacer,\n  Text,\n  useRadioGroup,\n  HStack,\n} from \"@chakra-ui/react\";\nimport RadioCard from \"./components/RadioCard\";\nimport { MdFileDownload } from \"react-icons/md\";\nimport DropZone from \"./components/dropzone\";\nimport { useForm } from \"react-hook-form\";\nimport { encryptMessage } from \"./utils/crypto\";\nimport { useState } from \"react\";\nimport { createFileURL } from \"./utils/createFileURL\";\nimport readFileAsText from \"./utils/readFileAsText\";\n\ninterface IProps {\n  file: File[];\n  message: string | File[];\n}\n\nexport default function EncryptPanel() {\n  const [encryptedMessageValue, setEncryptedMessageValue] = useState<string>(\"\");\n  const [radioValue, setRadioValue] = useState<\"File\" | \"Text\">(\"File\");\n  const { hasCopied, onCopy } = useClipboard(encryptedMessageValue);\n  const { register, handleSubmit, errors, control, setValue } = useForm();\n  const onSubmit = async ({ file: [keyFile], message }: IProps) => {\n    if (typeof message === \"string\") {\n      const files = [readFileAsText(keyFile)];\n      Promise.all(files).then(([key]) => {\n        encrypt(key, message);\n      });\n      return;\n    }\n    const files = [readFileAsText(keyFile), readFileAsText(message[0])];\n    Promise.all(files).then(([key, message]) => {\n      encrypt(key, message);\n    });\n  };\n  const encrypt = async (key: string, message: string) => {\n    try {\n      const encryptedMessage = await encryptMessage(key, message);\n      setEncryptedMessageValue(encryptedMessage);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const options = [\"File\", \"Text\"];\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: \"message\",\n    defaultValue: \"File\",\n    onChange: (e: \"File\" | \"Text\") => setRadioValue(e),\n  });\n  const group = getRootProps();\n  return (\n    <Container maxW=\"2xl\" h=\"full\">\n      <Stack as=\"form\" onSubmit={handleSubmit(onSubmit)} spacing={4}>\n        <FormControl isRequired isInvalid={errors?.file ? true : false}>\n          <FormLabel>Public Key</FormLabel>\n          <DropZone name=\"file\" control={control} setValue={setValue} />\n          <FormErrorMessage>{errors?.file && \"No file selected\"}</FormErrorMessage>\n        </FormControl>\n        <FormControl>\n          <FormLabel>Type of message</FormLabel>\n          <HStack {...group}>\n            {options.map((value: any) => {\n              //@ts-ignore\n              const radio = getRadioProps({ value });\n              return (\n                <RadioCard key={value} {...radio}>\n                  {value}\n                </RadioCard>\n              );\n            })}\n          </HStack>\n        </FormControl>\n        {radioValue === \"File\" ? (\n          <FormControl isRequired isInvalid={errors?.message ? true : false}>\n            <FormLabel>Message</FormLabel>\n            <DropZone name=\"message\" control={control} setValue={setValue} />\n            <FormErrorMessage>{errors?.message && \"No file selected\"}</FormErrorMessage>\n          </FormControl>\n        ) : (\n          <FormControl isRequired isInvalid={errors?.message ? true : false}>\n            <FormLabel>Message</FormLabel>\n            <Textarea\n              resize=\"vertical\"\n              placeholder=\"Write the message to encrypt\"\n              size=\"sm\"\n              name=\"message\"\n              ref={register({ required: \"This field is required\" })}\n            />\n          </FormControl>\n        )}\n\n        <Button isFullWidth bg=\"teal.500\" type=\"submit\">\n          Encrypt Message\n        </Button>\n        {encryptedMessageValue ? (\n          <Flex justifi=\"center\" align=\"center\">\n            <Spacer />\n            <Link\n              href={createFileURL(encryptedMessageValue)}\n              isExternal\n              download=\"encryptedMessage.txt\"\n            >\n              <Button leftIcon={<Icon as={MdFileDownload} w={6} h={6} />} bg=\"teal.500\">\n                Download\n              </Button>\n            </Link>\n            <Spacer />\n            <Text>Or</Text>\n            <Spacer />\n            <Button bg=\"teal.500\" onClick={onCopy}>\n              {hasCopied ? \"Copied\" : \"Copy message\"}\n            </Button>\n            <Spacer />\n          </Flex>\n        ) : null}\n      </Stack>\n    </Container>\n  );\n}\n","import { Box, Tabs, Tab, TabList, TabPanels, TabPanel, Text } from \"@chakra-ui/react\";\nimport CreateKeysPanel from \"./createKeysPanel\";\nimport DecryptPanel from \"./decryptPanel\";\nimport EncryptPanel from \"./encryptPanel\";\nfunction App() {\n  return (\n    <Box as=\"main\">\n      <Tabs isManual isFitted variant=\"enclosed\" defaultIndex={1}>\n        <TabList>\n          <Tab>\n            <Text fontSize=\"xl\">Create Keys</Text>\n          </Tab>\n          <Tab>\n            <Text fontSize=\"xl\">Encrypt</Text>\n          </Tab>\n          <Tab>\n            <Text fontSize=\"xl\">Decrypt</Text>\n          </Tab>\n        </TabList>\n        <TabPanels>\n          <TabPanel>\n            <CreateKeysPanel />\n          </TabPanel>\n          <TabPanel>\n            <EncryptPanel />\n          </TabPanel>\n          <TabPanel>\n            <DecryptPanel />\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </Box>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ChakraProvider, extendTheme, CSSReset, ColorModeScript } from \"@chakra-ui/react\";\n\nconst theme = extendTheme({\n  config: {\n    initialColorMode: \"dark\",\n    useSystemColorMode: false,\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <CSSReset />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}